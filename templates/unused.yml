---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM template for a simple lambda function

Globals:
  Function:
    # Documentation and other DeploymentPreference Types can be found here: https://github.com/awslabs/serverless-application-model/blob/master/docs/safe_lambda_deployments.rst
    AutoPublishAlias: live
    DeploymentPreference:
      Type: AllAtOnce

Outputs:
  StackArn:
    Description: Use this as the stack_arn in your cloud_formation_deployment_stack
      override.
    Value: {Ref: 'AWS::StackId'}
Parameters:
  AttachLambdaFunctionToVPC: { Type: String, Default: 'false', AllowedValues: ['true', 'false']}
  Stage: {Type: String, Default: 'Beta'}
  UseBatsKeyParam: {Type: String, Default: 'false', AllowedValues: ['true','false']}
Conditions:
  UseBatsKey:
    'Fn::Equals':
      - {Ref: UseBatsKeyParam}
      - 'true'
  RunLambdaInVPC:
    Fn::Equals: [ {Ref: AttachLambdaFunctionToVPC}, "true"]
  IsDevEnv:
    'Fn::Equals': [ {Ref: Stage}, 'test']
Mappings:
    Accounts:
        ThisAccount:
            427563245981: "PodHistory-Integ-DUB"
            884104270811: "PodHistory-Integ-IAD"
            056256527295: "PodHistory-Integ-NRT"
            668766302210: "PodHistory-Prod-DUB"
            430924627727: "PodHistory-Prod-IAD"
            023343105140: "PodHistory-Prod-NRT"
    TOPICS:
        KPPSSNS:
            270103597124: "arn:aws:sns:eu-west-1:814206673498:Pod-Manager-Notifications" #DEV Remove
            427563245981: "arn:aws:sns:eu-west-1:877248021004:prod_kpps_pod_upsert_delete"
            884104270811: "arn:aws:sns:us-east-1:877248021004:prod_kpps_pod_upsert_delete"
            056256527295: "arn:aws:sns:ap-northeast-1:877248021004:prod_kpps_pod_upsert_delete"
            668766302210: "arn:aws:sns:eu-west-1:877248021004:prod_kpps_pod_upsert_delete"
            430924627727: "arn:aws:sns:us-east-1:877248021004:prod_kpps_pod_upsert_delete"
            023343105140: "arn:aws:sns:ap-northeast-1:877248021004:prod_kpps_pod_upsert_delete"
Resources:
  KPPSLambdaFunction:
    Properties:
      CodeUri:
        Bucket: {'Fn::If' : ['UseBatsKey', 'BATS::SAM::CodeS3Bucket', {'Fn::Select': ["5",{ 'Fn::Split' : [ ":", {"Fn::ImportValue" : "DeploymentBucket"} ] }]}]}
        Key: BATS::SAM::CodeS3Key
      Handler: handlers.KPPS_handler
      MemorySize: 128
      Role:
        Fn::GetAtt: [LambdaRole, Arn]
      Runtime: python2.7
      Timeout: 30
      VpcConfig:
        Fn::If:
        - RunLambdaInVPC
        - SecurityGroupIds: []
          SubnetIds:
          - {'Fn::ImportValue': PrivateSubnet01}
          - {'Fn::ImportValue': PrivateSubnet02}
        - {Ref: 'AWS::NoValue'}
      Environment:
        Variables:
          POD_BUCKET:
            Fn::Join: ["", ["podhistory","-", {Ref: "AWS::Region"}, "-", {Ref: "AWS::AccountId"}]]
          ZONE_BUCKET:
            Fn::Join: ["", ["podhistoryksk","-", {Ref: "AWS::Region"}, "-", {Ref: "AWS::AccountId"}]]
    Type: AWS::Serverless::Function
  LambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action: ['cloudwatch:*', 'logs:*']
            Effect: Allow
            Resource: '*'
          - Fn::If:
            - RunLambdaInVPC
            - Action: ['ec2:CreateNetworkInterface', 'ec2:DescribeNetworkInterfaces', 'ec2:DeleteNetworkInterface']
              Effect: Allow
              Resource: '*'
            - {Ref: 'AWS::NoValue'}
          Version: '2012-10-17'
        PolicyName: lambdaRoleAPIG
    Type: AWS::IAM::Role
  KPSSLambdaLogGroup:
    DependsOn: KPPSLambdaFunction
    Properties:
      LogGroupName: {"Fn::Sub": "/aws/lambda/${KPPSLambdaFunction}"}
    Type: AWS::Logs::LogGroup
  KPPSLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn:
        Fn::If:
          - IsDevEnv
          - Ref: DevSNSTopic
          - Fn::FindInMap:
            - "TOPICS"
            - "KPPSSNS"
            - "Ref": "AWS::AccountId"
      FunctionName:
        Fn::GetAtt: [KPPSLambdaFunction, Arn]
  PodBucket:
    Properties:
      BucketName:
        Fn::Join: ["", ["podhistory","-", {Ref: "AWS::Region"}, "-", {Ref: "AWS::AccountId"}]]
    Type: AWS::S3::Bucket
  ZoneBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join: ["", ["podhistoryksk","-", {Ref: "AWS::Region"}, "-", {Ref: "AWS::AccountId"}]]
  DevSNSTopic:
    Type: "AWS::SNS::Topic"
    Condition: IsDevEnv
